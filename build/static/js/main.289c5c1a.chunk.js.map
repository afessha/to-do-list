{"version":3,"sources":["components/ToDo.js","redux/actions.js","components/Footer.js","App.js","serviceWorker.js","redux/toDoListReducer.js","redux/reducer.js","redux/store.js","index.js"],"names":["connect","state","toDoList","dispatch","addToDo","toDo","type","toDoAdd","deleteToDo","toDoDelete","clearAll","props","useState","toDoInput","setToDoInput","handleSubmit","trim","className","placeholder","autoFocus","value","onChange","event","target","onKeyPress","key","onClick","length","List","map","todo","index","ListItem","toString","dense","button","Checkbox","tabIndex","disableRipple","ListItemText","primary","ListItemSecondaryAction","IconButton","aria-label","Footer","App","ToDo","Boolean","window","location","hostname","match","INITAL_TODOS","toDoListReducer","action","initalToDos","filter","item","reducer","combineReducers","persistConfig","storage","persistedReducer","persistReducer","store","createStore","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0UA6EA,IAaeA,eAbS,SAACC,GACvB,MAAO,CACLC,SAAUD,EAAMC,aAIO,SAACC,GAC1B,MAAO,CACLC,QAAS,SAACC,GAAD,OAAUF,EC3EhB,SAAiBE,GACtB,MAAO,CAAEC,KAVc,YAUGD,QD0EIE,CAAQF,KACpCG,WAAY,SAACH,GAAD,OAAUF,ECxEnB,SAAoBE,GACzB,MAAO,CAAEC,KAXiB,eAWGD,QDuEII,CAAWJ,KAC1CK,SAAU,kBAAMP,ECrEX,CAAEG,KAfkB,sBDuFdN,EA/Ef,SAAcW,GAAQ,IAAD,EACeC,mBAAS,IADxB,mBACZC,EADY,KACDC,EADC,KAKbC,EAAe,WACM,KAArBF,EAAUG,SACZL,EAAMP,QAAQS,GACdC,EAAa,MASjB,OACE,yBAAKG,UAAU,kBACb,2BACEA,UAAU,aACVX,KAAK,OACLY,YAAY,cACZC,WAAS,EACTC,MAAOP,EACPQ,SAvBe,SAACC,GACpBR,EAAaQ,EAAMC,OAAOH,QAuBtBI,WAfiB,SAACF,GACJ,UAAdA,EAAMG,KACRV,OAeA,4BAAQT,KAAK,SAASW,UAAU,MAAMS,QAASX,GAA/C,OAGA,yBAAKE,UAAU,aACc,IAA1BN,EAAMT,SAASyB,OACd,kBAACC,EAAA,EAAD,KACGjB,EAAMT,SAAS2B,KAAI,SAACC,EAAMC,GAAP,OAClB,kBAACC,EAAA,EAAD,CAAUP,IAAKM,EAAME,WAAYC,OAAK,EAACC,QAAM,GAC3C,kBAACC,EAAA,EAAD,CAAUC,UAAW,EAAGC,eAAa,IACrC,kBAACC,EAAA,EAAD,CAAcC,QAASV,EAAMb,UAAU,cACvC,kBAACwB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,aAAW,SACXjB,QAAS,WACPf,EAAMH,WAAWsB,KAGnB,kBAAC,IAAD,aAMR,KACuB,IAA1BnB,EAAMT,SAASyB,OACd,4BACEV,UAAU,QACVS,QAAS,WACPf,EAAMD,aAHV,SAQE,UEnEGkC,EAHA,WACb,OAAO,yBAAK3B,UAAU,UAAf,2BCYM4B,MAVf,WACE,OACE,yBAAK5B,UAAU,OACb,4BAAQA,UAAU,UAAlB,cACA,kBAAC6B,EAAD,MACA,kBAAC,EAAD,QCEcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBChBAC,EAAe,GAkBNC,MAhBf,WAAwD,IAA/BpD,EAA8B,uDAAtBmD,EAAcE,EAAQ,uCACrD,OAAQA,EAAOhD,MACb,IJJsB,aIKpB,MAAM,GAAN,mBAAWL,GAAX,CAAkBqD,EAAOC,cAC3B,IJPqB,YIQnB,MAAM,GAAN,mBAAWtD,GAAX,CAAkBqD,EAAOjD,OAC3B,IJNwB,eIOtB,OAAOJ,EAAMuD,QAAO,SAACC,GAAD,OAAUA,IAASH,EAAOjD,QAEhD,IJVyB,gBIWvB,OAAO+C,EACT,QACE,OAAOnD,ICTEyD,EAJCC,YAAgB,CAC9BzD,SAAUmD,I,gBCCNO,EAAgB,CACpBnC,IAAK,OACLoC,Q,OAAAA,GAGIC,EAAmBC,YAAeH,EAAeF,GACnDM,EAAQC,YAAYH,GACpBI,EAAYC,YAAaH,G,QCF7BI,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUN,MAAOA,GACf,kBAAC,IAAD,CAAaO,QAAS,KAAML,UAAWA,GACrC,kBAAC,EAAD,SAINM,SAASC,eAAe,SJiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.289c5c1a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport \"../App.css\";\r\nimport List from \"@material-ui/core/List\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemSecondaryAction from \"@material-ui/core/ListItemSecondaryAction\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteIcon from \"@material-ui/icons/Delete\";\r\nimport { toDoAdd, toDoDelete, toDeleteAll } from \"../redux/actions\";\r\nfunction ToDO(props) {\r\n  const [toDoInput, setToDoInput] = useState(\"\");\r\n  const handleChange = (event) => {\r\n    setToDoInput(event.target.value);\r\n  };\r\n  const handleSubmit = () => {\r\n    if (toDoInput.trim() !== \"\") {\r\n      props.addToDo(toDoInput);\r\n      setToDoInput(\"\");\r\n    }\r\n  };\r\n  const handleKeyPress = (event) => {\r\n    if (event.key === \"Enter\") {\r\n      handleSubmit();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"todo-container\">\r\n      <input\r\n        className=\"todo-input\"\r\n        type=\"text\"\r\n        placeholder=\"  New To-do\"\r\n        autoFocus\r\n        value={toDoInput}\r\n        onChange={handleChange}\r\n        onKeyPress={handleKeyPress}\r\n      />\r\n      <button type=\"button\" className=\"add\" onClick={handleSubmit}>\r\n        ADD\r\n      </button>\r\n      <div className=\"todo-list\">\r\n        {props.toDoList.length !== 0 ? (\r\n          <List>\r\n            {props.toDoList.map((todo, index) => (\r\n              <ListItem key={index.toString()} dense button>\r\n                <Checkbox tabIndex={-1} disableRipple />\r\n                <ListItemText primary={todo} className=\"completed\" />\r\n                <ListItemSecondaryAction>\r\n                  <IconButton\r\n                    aria-label=\"Delete\"\r\n                    onClick={() => {\r\n                      props.deleteToDo(todo);\r\n                    }}\r\n                  >\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                </ListItemSecondaryAction>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n        ) : null}\r\n        {props.toDoList.length !== 0 ? (\r\n          <button\r\n            className=\"clear\"\r\n            onClick={() => {\r\n              props.clearAll();\r\n            }}\r\n          >\r\n            Clear\r\n          </button>\r\n        ) : null}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    toDoList: state.toDoList,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addToDo: (toDo) => dispatch(toDoAdd(toDo)),\r\n    deleteToDo: (toDo) => dispatch(toDoDelete(toDo)),\r\n    clearAll: () => dispatch(toDeleteAll()),\r\n  };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ToDO);\r\n","//action types\r\nexport const TO_DO_ADD = \"TO_DO_ADD\";\r\nexport const TO_DO_LOAD = \"TO_DO_LOAD\";\r\nexport const TO_DELETE_ALL = \"TO_DELETE_ALL\";\r\nexport const TO_DO_DELETE = \"TO_DO_DELETE\";\r\n\r\nexport function initaliseToDos(initalToDos) {\r\n  return { type: TO_DO_ADD, initalToDos };\r\n}\r\n\r\nexport function toDoAdd(toDo) {\r\n  return { type: TO_DO_ADD, toDo };\r\n}\r\n\r\nexport function toDoDelete(toDo) {\r\n  return { type: TO_DO_DELETE, toDo };\r\n}\r\nexport function toDeleteAll() {\r\n  return { type: TO_DELETE_ALL };\r\n}\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\nconst Footer = () => {\r\n  return <div className=\"footer\"> Awet Fessha Â©2020 </div>;\r\n};\r\nexport default Footer;\r\n","import React from \"react\";\nimport ToDo from \"./components/ToDo\";\nimport Footer from \"./components/Footer\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"header\">TO-DO LIST</header>\n      <ToDo />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { TO_DO_LOAD, TO_DO_ADD, TO_DO_DELETE, TO_DELETE_ALL } from \"./actions\";\r\n\r\nconst INITAL_TODOS = [];\r\n\r\nfunction toDoListReducer(state = INITAL_TODOS, action) {\r\n  switch (action.type) {\r\n    case TO_DO_LOAD:\r\n      return [...state, action.initalToDos];\r\n    case TO_DO_ADD:\r\n      return [...state, action.toDo];\r\n    case TO_DO_DELETE:\r\n      return state.filter((item) => item !== action.toDo);\r\n\r\n    case TO_DELETE_ALL:\r\n      return INITAL_TODOS;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nexport default toDoListReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport toDoListReducer from \"./toDoListReducer\";\r\n\r\nconst reducer = combineReducers({\r\n  toDoList: toDoListReducer,\r\n});\r\n\r\nexport default reducer;\r\n","import reducer from \"././reducer\";\r\nimport { createStore } from \"redux\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\"; // defaults to localStorage for web\r\n\r\nconst persistConfig = {\r\n  key: \"root\",\r\n  storage,\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, reducer);\r\nlet store = createStore(persistedReducer);\r\nlet persistor = persistStore(store);\r\nexport { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { store, persistor } from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}